AWSTemplateFormatVersion: '2010-09-09'
Description: "Custom AWS Config rule that evaluates IAM Role tags and provides SSM remediation. Names follow OMBASR-* pattern."

Parameters:
  Team:
    Type: String
    Default: hcops
    Description: "Team identifier (e.g., hcops, sec, plat)."
  Service:
    Type: String
    Default: ec2
    Description: "Service identifier (e.g., ec2, iam, s3)."
  Purpose:
    Type: String
    Default: checkname
    Description: "Purpose suffix (e.g., checkname, requiredtags)."
  DefaultAppCatId:
    Type: String
    Default: UNKNOWN
  DefaultSupportTeam:
    Type: String
    Default: UNKNOWN

Resources:
  EvalRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "OMBASR-RoleEvaluate-${Team}-${Service}${Purpose}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "OMBASR-EvalInline-${Team}-${Service}${Purpose}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: iam:ListRoleTags
                Resource: '*'
              - Effect: Allow
                Action: config:PutEvaluations
                Resource: '*'

  EvaluatorFn:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "OMBASR-LambdaEvaluate-${Team}-${Service}${Purpose}"
      Runtime: python3.11
      Handler: index.main
      Role: !GetAtt EvalRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import json, re, boto3
          iam = boto3.client('iam')
          cfg = boto3.client('config')

          PATTERNS = [re.compile(r"AWSServiceRoleFor.*"), re.compile(r"AWS-QuickSetup-.*Role.*")]
          APP_CAT_KEYS = {'appcatid', 'app cat id', 'app-cat-id'}
          SUP_TEAM_KEYS = {'supportteam', 'support team', 'support-team'}

          def _norm(k): return ''.join(k.split()).replace('-', '').lower()

          def evaluate(role_name):
              if not any(p.match(role_name) for p in PATTERNS):
                  return 'COMPLIANT', 'Not service-linked role'
              have = {_norm(t['Key']) for t in iam.list_role_tags(RoleName=role_name).get('Tags', [])}
              missing = []
              if not (APP_CAT_KEYS & have): missing.append('AppCatId')
              if not (SUP_TEAM_KEYS & have): missing.append('SupportTeam')
              if missing: return 'NON_COMPLIANT', f"Missing {', '.join(missing)} tags"
              return 'COMPLIANT', 'All mandatory tags present'

          def main(event, context):
              inv = json.loads(event['invokingEvent'])
              ci = inv.get('configurationItem', {})
              if ci.get('resourceType') != 'AWS::IAM::Role': return
              role_name = ci['resourceName']
              status, note = evaluate(role_name)
              payload = {
                  "Evaluations": [{
                      "ComplianceResourceType": ci['resourceType'],
                      "ComplianceResourceId": role_name,
                      "ComplianceType": status,
                      "Annotation": note,
                      "OrderingTimestamp": ci['configurationItemCaptureTime'],
                  }],
                  "ResultToken": event['resultToken'],
              }
              cfg.put_evaluations(**payload)

  LambdaInvokePerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EvaluatorFn
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  SlrRule:
    Type: AWS::Config::ConfigRule
    DependsOn: LambdaInvokePerm
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      ConfigRuleName: !Sub "OMBASR-Configrule-${Team}-${Service}${Purpose}"
      Description: !Sub "Validate required tags on service-linked IAM roles for ${Team}/${Service}${Purpose}."
      Scope:
        ComplianceResourceTypes: [AWS::IAM::Role]
      Source:
        Owner: CUSTOM_LAMBDA
        SourceIdentifier: !GetAtt EvaluatorFn.Arn
        SourceDetails:
          - EventSource: aws.config
            MessageType: ConfigurationItemChangeNotification
          - EventSource: aws.config
            MessageType: OversizedConfigurationItemChangeNotification

  RemediationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "OMBASR-RoleRemediate-${Team}-${Service}${Purpose}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ssm.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "OMBASR-Remediate-${Team}-${Service}${Purpose}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:TagRole
                  - iam:UntagRole
                  - iam:ListRoleTags
                  - iam:GetRole
                Resource: "arn:aws:iam::*:role/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  RemediateDoc:
    Type: AWS::SSM::Document
    Properties:
      Name: !Sub "OMBASR-SSMDocRemediate-${Team}-${Service}${Purpose}"
      DocumentType: Automation
      DocumentFormat: YAML          # <-- tell SSM the content is YAML
      Content:
        Fn::Sub: |
          schemaVersion: '0.3'
          description: "Add required tags (AppCatId, SupportTeam) to IAM Role for ${Team}/${Service}${Purpose}."
          assumeRole: "{{ AutomationAssumeRole }}"
          parameters:
            AutomationAssumeRole:
              type: String
              description: "IAM role for Automation to perform tagging."
            RoleName:
              type: String
              description: "Target IAM Role name."
            AppCatId:
              type: String
              default: "${DefaultAppCatId}"
            SupportTeam:
              type: String
              default: "${DefaultSupportTeam}"
          mainSteps:
            - name: EnsureTags
              action: aws:executeScript
              description: "Checks and sets missing tags on the IAM Role."
              inputs:
                Runtime: python3.11
                Handler: script_handler
                InputPayload:
                  role_name: "{{ RoleName }}"
                  appcat: "{{ AppCatId }}"
                  supteam: "{{ SupportTeam }}"
                Script: |
                  import boto3
                  iam = boto3.client('iam')
                  def _norm(k): return ''.join(k.split()).replace('-', '').lower()
                  def script_handler(event, context):
                      role = event['role_name']
                      appcat = event['appcat']
                      supteam = event['supteam']
                      have = set(_norm(t['Key']) for t in iam.list_role_tags(RoleName=role).get('Tags', []))
                      to_add = []
                      if 'appcatid' not in have:
                          to_add.append({'Key': 'AppCatId', 'Value': appcat})
                      if 'supportteam' not in have:
                          to_add.append({'Key': 'SupportTeam', 'Value': supteam})
                      if to_add:
                          iam.tag_role(RoleName=role, Tags=to_add)
                          return {"changed": True, "added": to_add}
                      return {"changed": False, "added": []}

  SlrRemediation:
    Type: AWS::Config::RemediationConfiguration
    Properties:
      ConfigRuleName: !Ref SlrRule
      ResourceType: AWS::IAM::Role
      TargetType: SSM_DOCUMENT
      TargetId: !Ref RemediateDoc
      TargetVersion: "$DEFAULT"
      Automatic: false
      ExecutionControls:
        SsmControls:
          ConcurrentExecutionRatePercentage: 10
          ErrorPercentage: 10
      Parameters:
        AutomationAssumeRole:
          StaticValue:
            Values: [ !GetAtt RemediationRole.Arn ]
        RoleName:
          ResourceValue:
            Value: RESOURCE_ID
        AppCatId:
          StaticValue:
            Values: [ !Ref DefaultAppCatId ]
        SupportTeam:
          StaticValue:
            Values: [ !Ref DefaultSupportTeam ]

Outputs:
  RuleName:
    Value: !Ref SlrRule
  LambdaEvaluator:
    Value: !Ref EvaluatorFn
  RemediationDocumentName:
    Value: !Ref RemediateDoc
  RemediationRoleArn:
    Value: !GetAtt RemediationRole.Arn
