AWSTemplateFormatVersion: '2010-09-09'
Description: Managed AWS Config rule (REQUIRED_TAGS) for EC2 Instances & Volumes with SSM remediation and dedicated IAM role.

Parameters:
  Tag1Key:
    Type: String
    Default: AppCatId
  Tag1Value:
    Type: String
    Default: UNKNOWN
  Tag2Key:
    Type: String
    Default: SupportTeam
  Tag2Value:
    Type: String
    Default: UNKNOWN
  ResourceType1:
    Type: String
    Default: AWS::EC2::Instance
  ResourceType2:
    Type: String
    Default: AWS::EC2::Volume

Resources:
  RequiredTagsRule:
    Type: AWS::Config::ConfigRule
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      ConfigRuleName: !Sub "${AWS::StackName}-Managed-RequiredTags"
      Description: "Checks required tags via AWS managed rule REQUIRED_TAGS"
      Scope:
        ComplianceResourceTypes:
          - !Ref ResourceType1
          - !Ref ResourceType2
      Source:
        Owner: AWS
        SourceIdentifier: REQUIRED_TAGS
      InputParameters:
        tag1Key: !Ref Tag1Key
        tag1Value: !Ref Tag1Value
        tag2Key: !Ref Tag2Key
        tag2Value: !Ref Tag2Value

  RemediationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-RemediateRole-Managed-RequiredTags"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ssm.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: OMBASR-Remediate-EC2-Tagging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                  - ec2:DeleteTags
                  - ec2:DescribeTags
                  - ec2:DescribeInstances
                  - ec2:DescribeVolumes
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  SetRequiredTagsDoc:
    Type: AWS::SSM::Document
    Properties:
      Name: !Sub "${AWS::StackName}-Remediation-Managed-RequiredTags"
      DocumentType: Automation
      Content:
        schemaVersion: '0.3'
        description: "Add missing required tags to an EC2 Instance or Volume."
        assumeRole: "{{ AutomationAssumeRole }}"
        parameters:
          AutomationAssumeRole:
            type: String
            description: "(Required) IAM role for Automation to perform tagging"
          ResourceId:
            type: String
            description: "(Required) The resource ID (e.g., i-1234abcd or vol-1234abcd)"
          ResourceType:
            type: String
            allowedValues:
              - AWS::EC2::Instance
              - AWS::EC2::Volume
            description: "(Required) Resource type for the ID"
          Tag1Key:
            type: String
          Tag1Value:
            type: String
          Tag2Key:
            type: String
          Tag2Value:
            type: String
        mainSteps:
          - name: EnsureTags
            action: aws:executeScript
            description: "Creates tags on the resource if missing"
            inputs:
              Runtime: python3.11
              Handler: script_handler
              InputPayload:
                resource_id: "{{ ResourceId }}"
                resource_type: "{{ ResourceType }}"
                tag1_key: "{{ Tag1Key }}"
                tag1_val: "{{ Tag1Value }}"
                tag2_key: "{{ Tag2Key }}"
                tag2_val: "{{ Tag2Value }}"
              Script: |
                import boto3

                ec2 = boto3.client('ec2')

                def _kv(key, val):
                  if not key:
                    return None
                  v = (val or "").split(",")[0].strip() if val else "UNKNOWN"
                  return {"Key": key, "Value": v}

                def script_handler(event, context):
                  rid = event["resource_id"]
                  rtype = event["resource_type"]
                  tag1k, tag1v = event.get("tag1_key"), event.get("tag1_val")
                  tag2k, tag2v = event.get("tag2_key"), event.get("tag2_val")
                  to_apply = [t for t in [_kv(tag1k, tag1v), _kv(tag2k, tag2v)] if t]
                  if not to_apply:
                    return {"changed": False, "reason": "No tag keys provided"}
                  ec2.create_tags(Resources=[rid], Tags=to_apply)
                  return {"changed": True, "resource": rid, "type": rtype, "tags_applied": to_apply}

  RequiredTagsRemediationInstance:
    Type: AWS::Config::RemediationConfiguration
    Properties:
      ConfigRuleName: !Ref RequiredTagsRule
      ResourceType: !Ref ResourceType1
      TargetType: SSM_DOCUMENT
      TargetId: !Ref SetRequiredTagsDoc
      TargetVersion: "$DEFAULT"
      Automatic: false
      ExecutionControls:
        SsmControls:
          ConcurrentExecutionRatePercentage: 10
          ErrorPercentage: 10
      Parameters:
        AutomationAssumeRole:
          StaticValue:
            Values: [ !GetAtt RemediationRole.Arn ]
        ResourceId:
          ResourceValue:
            Value: RESOURCE_ID
        ResourceType:
          StaticValue:
            Values: [ !Ref ResourceType1 ]
        Tag1Key:
          StaticValue:
            Values: [ !Ref Tag1Key ]
        Tag1Value:
          StaticValue:
            Values: [ !Ref Tag1Value ]
        Tag2Key:
          StaticValue:
            Values: [ !Ref Tag2Key ]
        Tag2Value:
          StaticValue:
            Values: [ !Ref Tag2Value ]

  RequiredTagsRemediationVolume:
    Type: AWS::Config::RemediationConfiguration
    Properties:
      ConfigRuleName: !Ref RequiredTagsRule
      ResourceType: !Ref ResourceType2
      TargetType: SSM_DOCUMENT
      TargetId: !Ref SetRequiredTagsDoc
      TargetVersion: "$DEFAULT"
      Automatic: false
      ExecutionControls:
        SsmControls:
          ConcurrentExecutionRatePercentage: 10
          ErrorPercentage: 10
      Parameters:
        AutomationAssumeRole:
          StaticValue:
            Values: [ !GetAtt RemediationRole.Arn ]
        ResourceId:
          ResourceValue:
            Value: RESOURCE_ID
        ResourceType:
          StaticValue:
            Values: [ !Ref ResourceType2 ]
        Tag1Key:
          StaticValue:
            Values: [ !Ref Tag1Key ]
        Tag1Value:
          StaticValue:
            Values: [ !Ref Tag1Value ]
        Tag2Key:
          StaticValue:
            Values: [ !Ref Tag2Key ]
        Tag2Value:
          StaticValue:
            Values: [ !Ref Tag2Value ]

Outputs:
  ManagedRuleName:
    Value: !Ref RequiredTagsRule
  RemediationDocumentName:
    Value: !Ref SetRequiredTagsDoc
  RemediationRoleArn:
    Value: !GetAtt RemediationRole.Arn
